package com.dive.game;

import java.util.ArrayList;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
<<<<<<< HEAD
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.TextureAtlas.AtlasRegion;
import com.badlogic.gdx.utils.Timer;
import com.badlogic.gdx.utils.Timer.Task;
import com.badlogic.gdx.math.Intersector;
import com.badlogic.gdx.math.Polygon;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Skin;
import com.badlogic.gdx.scenes.scene2d.ui.Touchpad;
import com.badlogic.gdx.scenes.scene2d.ui.Touchpad.TouchpadStyle;
import com.badlogic.gdx.scenes.scene2d.utils.Drawable;

public class DiveGame extends ApplicationAdapter {
	private SpriteBatch batch;
	private Diver diver;
	private Sprite background1, background2;
	private Touchpad joystick;
	private Drawable knob;
	private Drawable background;
	private TouchpadStyle joystickstyle;
	private Skin skin;
	private Stage stage;


	ObjectGenerator newObjects;
	ArrayList<Shark> listSharks;
=======

public class DiveGame extends ApplicationAdapter {
>>>>>>> upstream/master
	
	private SpriteBatch batch;
	private ObjectGenerator newObjects;
	private World world;
	private GameScreen screen;
	private GameState gameState;
	private float deltaTime, pauseCD;

	@Override
	public void create() {
<<<<<<< HEAD
		float w = Gdx.graphics.getWidth();
		float h = Gdx.graphics.getHeight();
		


		batch = new SpriteBatch();
		diver = new Diver(Assets.getInstance().diver, 100, 50, 100, 200);
		background1 = new Sprite(Assets.getInstance().background);
		background2 = new Sprite(Assets.getInstance().background);

		newObjects = new ObjectGenerator(4);
		listSharks = new ArrayList<Shark>();
		
    	skin = new Skin();
    	skin.add("background",Assets.getInstance().joystickunder);
    	skin.add("knob",Assets.getInstance().joystickup);
		
    	joystickstyle = new TouchpadStyle();
    	background = skin.getDrawable("background");
    	knob = skin.getDrawable("knob");
   
		knob.setMinWidth(20);
		knob.setMinHeight(20);
		
		joystick = new Touchpad(5,joystickstyle);
=======

		batch = new SpriteBatch();
>>>>>>> upstream/master

		screen = new GameScreen(Gdx.graphics.getWidth(),Gdx.graphics.getHeight(),0,0);
		
		newObjects = new ObjectGenerator(8,8,0.1f, screen);
		world = new World(newObjects,screen,0.1f,gameState);
		gameState = GameState.GAME;
		pauseCD = 0;

	}

	@Override
	public void dispose() {
		batch.dispose();
		Assets.getInstance().dispose();
	}

	@Override
	public void render() {
		
		Gdx.gl.glClearColor(1, 1, 1, 1);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
<<<<<<< HEAD

		diver.onKeystroke();
		//diver.onJoystick();

		background1.translateX(-3);
		background2.translateX(-3);
		if (background1.getX() + background1.getWidth() < 0) {
			background1.setX(background2.getX() + background2.getWidth());
=======
		deltaTime = Gdx.graphics.getDeltaTime();
		
		//Spiellogik updaten und Welt bewegen
		if(gameState == GameState.GAME){
			world.update(deltaTime);
			world.move(deltaTime);
>>>>>>> upstream/master
		}
		

		//Spiel pausieren
		if(Gdx.input.isKeyPressed(Input.Keys.SPACE)){
			if(gameState == GameState.GAME){gameState=GameState.PAUSE; pauseCD=1;}
			else if(gameState == GameState.PAUSE){gameState=GameState.GAME; pauseCD=1;}
			else{pauseCD-=deltaTime;}
		}
<<<<<<< HEAD
		joystick.setBounds(15, 15, creationPixel, creationPixel);
		joystick.draw(batch, creationPixel);

		diver.draw(batch, Gdx.graphics.getDeltaTime());
=======
		
		//batch erstellen
		batch.begin();
			world.draw(batch);
>>>>>>> upstream/master
		batch.end();
	}

	@Override
	public void resize(int width, int height) {
		screen.setSize(width, height);
		world.resize();
	}

	@Override
	public void pause() {
		gameState = GameState.PAUSE;
	}

	@Override
	public void resume() {
	}



}
